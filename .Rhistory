lbl_y = rownames(mat),
rnge = seq(min(mat)+0.5, max(mat)+0.5, 1) #,
#main = paste0(names(set_lst)[cnt], "_", sub, m)
)
pdf(file = paste0(modDir, "heats_", m, "_", names(set_lst)[cnt], "_", comm, ".pdf"),
width = 7, height = 10); par(mar=c(6, 4, 4, 2) + 0.1)#paper = "a4")
print(l)
dev.off()
png(paste0(modDir, "heats_", m, "_", names(set_lst)[cnt], "_", comm, ".png"),
width = 210, height = 297, units = "mm", res = 720); par(mar=c(6, 4, 4, 2) + 0.1)
print(l)
dev.off()
return(mat)
})
names(SR_resid_lst) <- resp_set
}
}
modDir
#####
###read files
#####
set_lst <- lapply(set, function(o){
set_moddir <- mod_dir_lst[grepl(paste0("_", o, "_"), mod_dir_lst)]
modDir <- paste0(inpath, set_dir, set_moddir, "/")
file <- tryCatch(
readRDS(file = paste0(modDir, "data/", "60_master_lst_varimp_",o, ".rds")),
error = function(e)file <- NA)
return(file)
})
set_lst
set
o <- set[[1]]
set_moddir <- mod_dir_lst[grepl(paste0("_", o, "_"), mod_dir_lst)]
modDir <- paste0(inpath, set_dir, set_moddir, "/")
readRDS(file = paste0(modDir, "data/", "60_master_lst_varimp_",o, ".rds"))
paste0(modDir, "data/", "60_master_lst_varimp_",o, ".rds")
source('C:/Users/Alice/Uni/Projekte/Kili/src/70_plotting.R')
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
i <- set_lst[[1]]
cnt <<- cnt+1
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
i <- set_lst[[1]]
cnt <<- cnt+1
if(grepl("cv_index", cv)){
runs <- sort(unique(i$meta$cvindex_run))
}else{
runs <- seq(sum(grepl("outerrun", colnames(i$meta))))
}
set_moddir <- mod_dir_lst[grepl(paste0("_", names(set_lst)[cnt], "_"), mod_dir_lst)]
paste0(inpath, set_dir, set_moddir, "/")
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
i <- set_lst[[1]]
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
set
o <- "nofrst"
paste0(inpath, "20_master_lst_resid_", o, ".rds")
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
i <- set_lst[[1]]
cnt <<- cnt+1
if(grepl("cv_index", cv)){
runs <- sort(unique(i$meta$cvindex_run))
}else{
runs <- seq(sum(grepl("outerrun", colnames(i$meta))))
}
set_moddir <- mod_dir_lst[grepl(paste0("_", names(set_lst)[cnt], "_"), mod_dir_lst)]
paste0(inpath, set_dir, set_moddir, "/")
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
##############
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
i <- set_lst[[1]]
cnt <<- cnt+1
if(grepl("cv_index", cv)){
runs <- sort(unique(i$meta$cvindex_run))
}else{
runs <- seq(sum(grepl("outerrun", colnames(i$meta))))
}
set_moddir <- mod_dir_lst[grepl(paste0("_", names(set_lst)[cnt], "_"), mod_dir_lst)]
modDir <- paste0(inpath, set_dir, set_moddir, "/")
for(k in names(i$resp)){ # k <- "SRmammals" k  <- "SRpredator"
# print(k)
# for (k in names(i$resp)){
for (outs in runs){ #outs <- 1
# print(outs)
#####
###split for outer loop (independet cv)
#####
if(grepl("cv_index", cv)){
###index-cv
plt_in <- i$meta$plotID[-which(i$meta$cvindex_run == outs)]
plt_out <- i$meta$plotID[which(i$meta$cvindex_run == outs)]
}else{
###cv-x
cv_nm <- colnames(i$meta)[grepl("outerrun", colnames(i$meta))][outs]
plt_in <- i$meta$plotID[i$meta[cv_nm] == 0]
plt_out <- i$meta$plotID[i$meta[cv_nm] == 1]
}
for (m in resp_set){ #m <- "lidarSR"
# print(m)
# if(length(unique(tbl_in[,m])) > 1){ #check if tbl_in has only 0 zB: SRlycopodiopsida/nofrst/outs = 1
#####
###create newdata dataframes
#####
new_dat <- i$meta[i$meta$plotID%in%plt_out,]
#####
###actual model
#####
mod <- tryCatch(
readRDS(file = paste0(modDir, "mod_run_", outs, "_", k, "_", m, ".rds")),
error = function(e)mod <- NA)
#####
###predict and write into new column
#####
if (!is.na(mod)){
prdct <- predict(object = mod, newdata = new_dat)
col_nm <- paste0("pred_", m) #column depending on model
i$resp[[k]][[col_nm]][i$resp[[k]]$plotID %in% plt_out] <- prdct
ncomp_nm <- paste0("ncomp_", m) #column name depending on model
i$resp[[k]][[ncomp_nm]] <- mod$bestTune[[1]]
}else{
col_nm <- paste0("pred_", m)
i$resp[[k]][[col_nm]][i$resp[[k]]$plotID %in% plt_out] <- NA
###vor?bergehend:
colnames(i$resp[[k]])[colnames(i$resp[[k]]) == "elev_pred"] <- "pred_elevSR"
colnames(i$resp[[k]])[colnames(i$resp[[k]]) == "RES"] <- "calc_elevRES"
ncomp_nm <- paste0("ncomp_", m) #column name depending on model
i$resp[[k]][[ncomp_nm]] <- NA
}
}
}
}
modDir
inpath
set_dir
outpath
set_dir
paste0(outpath, set_dir, set_moddir, "/")
# if (file.exists(paste0(modDir, "data/"))==F){
if (file.exists(paste0(outpath, set_dir, set_moddir, "/"))==F){
dir.create(file.path(paste0(outpath, set_dir, set_moddir, "/")), recursive = T)
}
# Description: predict species richness with different models and write into list with original data $resp
# Author: Alice Ziegler
# Date: 2018-12-06 10:26:41
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(CAST)
library(doParallel)
library(foreach)
library(parallel)
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
readRDS(file = paste0(inpath, "20_master_lst_resid_", o, ".rds"))
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
set_lst_ldr <- lapply(set_lst, function(i){ # i <- set_lst[[1]]
cnt <<- cnt+1
if(grepl("cv_index", cv)){
runs <- sort(unique(i$meta$cvindex_run))
}else{
runs <- seq(sum(grepl("outerrun", colnames(i$meta))))
}
set_moddir <- mod_dir_lst[grepl(paste0("_", names(set_lst)[cnt], "_"), mod_dir_lst)]
modDir <- paste0(inpath, set_dir, set_moddir, "/")
for(k in names(i$resp)){ # k <- "SRmammals" k  <- "SRpredator"
# print(k)
# for (k in names(i$resp)){
for (outs in runs){ #outs <- 1
# print(outs)
#####
###split for outer loop (independet cv)
#####
if(grepl("cv_index", cv)){
###index-cv
plt_in <- i$meta$plotID[-which(i$meta$cvindex_run == outs)]
plt_out <- i$meta$plotID[which(i$meta$cvindex_run == outs)]
}else{
###cv-x
cv_nm <- colnames(i$meta)[grepl("outerrun", colnames(i$meta))][outs]
plt_in <- i$meta$plotID[i$meta[cv_nm] == 0]
plt_out <- i$meta$plotID[i$meta[cv_nm] == 1]
}
for (m in resp_set){ #m <- "lidarSR"
# print(m)
# if(length(unique(tbl_in[,m])) > 1){ #check if tbl_in has only 0 zB: SRlycopodiopsida/nofrst/outs = 1
#####
###create newdata dataframes
#####
new_dat <- i$meta[i$meta$plotID%in%plt_out,]
#####
###actual model
#####
mod <- tryCatch(
readRDS(file = paste0(modDir, "mod_run_", outs, "_", k, "_", m, ".rds")),
error = function(e)mod <- NA)
#####
###predict and write into new column
#####
if (!is.na(mod)){
prdct <- predict(object = mod, newdata = new_dat)
col_nm <- paste0("pred_", m) #column depending on model
i$resp[[k]][[col_nm]][i$resp[[k]]$plotID %in% plt_out] <- prdct
ncomp_nm <- paste0("ncomp_", m) #column name depending on model
i$resp[[k]][[ncomp_nm]] <- mod$bestTune[[1]]
}else{
col_nm <- paste0("pred_", m)
i$resp[[k]][[col_nm]][i$resp[[k]]$plotID %in% plt_out] <- NA
###vor?bergehend:
colnames(i$resp[[k]])[colnames(i$resp[[k]]) == "elev_pred"] <- "pred_elevSR"
colnames(i$resp[[k]])[colnames(i$resp[[k]]) == "RES"] <- "calc_elevRES"
ncomp_nm <- paste0("ncomp_", m) #column name depending on model
i$resp[[k]][[ncomp_nm]] <- NA
}
}
}
}
# if (file.exists(paste0(modDir, "data/"))==F){
if (file.exists(paste0(outpath, set_dir, set_moddir, "/"))==F){
dir.create(file.path(paste0(outpath, set_dir, set_moddir, "/")), recursive = T)
}
saveRDS(i, file = paste0(outpath, set_dir, set_moddir, "/", "40_master_lst_ldr_", names(set_lst)[cnt], ".rds"))
# readRDS(file = paste0(outpath, set_dir, set_moddir, "/", "40_master_lst_ldr_", names(set_lst)[cnt], ".rds"))
return(i)
})
names(set_lst_ldr) <- set
set_moddir
# Description: cleanup dataset
# get rid of deprecated more general trophic levels that are not based on species level.
# Author: Alice Ziegler
# Date: 2018-12-06 13:46:07
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
source("000_setup.R")
o <- "frst"
set_moddir <- mod_dir_lst[grepl(paste0("_", o, "_"), mod_dir_lst)]
set_moddir
# Description: cleanup dataset
# get rid of deprecated more general trophic levels that are not based on species level.
# Author: Alice Ziegler
# Date: 2018-12-06 13:46:07
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
set_moddir <- mod_dir_lst[grepl(paste0("_", o, "_"), mod_dir_lst)]
file <- tryCatch(
readRDS(file = paste0(outpath, set_dir, set_moddir, "/", "40_master_lst_ldr_",o, ".rds")),
error = function(e)file <- NA)
return(file)
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
#############################################
cnt <- 0
i <- set_lst[[1]]
# Description: cleanup dataset
# get rid of deprecated more general trophic levels that are not based on species level.
# Author: Alice Ziegler
# Date: 2018-12-06 13:46:07
# to do:
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
source("000_setup.R")
#####
###read files
#####
set_lst <- lapply(set, function(o){
set_moddir <- mod_dir_lst[grepl(paste0("_", o, "_"), mod_dir_lst)]
file <- tryCatch(
readRDS(file = paste0(outpath, set_dir, set_moddir, "/", "40_master_lst_ldr_",o, ".rds")),
error = function(e)file <- NA)
return(file)
})
names(set_lst) <- set
set_lst <- set_lst[!is.na(set_lst)]
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
cnt <- 0
set_lst_cln <- lapply(set_lst, function(i){# i <- set_lst[[1]]
##get rid of old sum_generalists...
i$resp <- i$resp[names(i$resp)[!(grepl("sum_", names(i$resp)))]]
cnt <<- cnt+1
set_moddir <- mod_dir_lst[grepl(paste0("_", names(set_lst)[cnt], "_"), mod_dir_lst)]
for (k in names(i$resp)){ #k <- "SRmammals
# print(k)
i$resp[[k]][["pred_sumSR"]] <- rowSums(cbind(i$resp[[k]]$pred_elevSR, i$resp[[k]]$pred_lidarRES))
}
saveRDS(i, file =  paste0(outpath, set_dir, set_moddir, "/", "50_master_lst_all_mods_", names(set_lst)[cnt], ".rds"))
})
