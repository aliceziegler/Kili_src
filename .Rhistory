#                               levels = c("predator", "predator_sum", "generalist",
#                                          "generalist_sum", "decomposer",
#                                          "decomposer_sum", "herbivore", "herbivore_sum",
#                                          "plant", "plant_sum", "birds", "bats"))
# val_troph$resp <- factor(val_troph$resp,
# levels = unique(val_troph[with(val_troph, order(troph_sep, resp)),"resp"]))
val_troph$diet <- factor(val_troph$diet,
levels = levels(val_troph$diet))
val_troph_flt <- val_troph[is.finite(val_troph$RMSEsd_lidarSR),]
saveRDS(val_troph, file = paste0(modDir, "val_troph_mix_", comm, ".rds"))
val_type <- gather(val_troph_flt, key = type, value = value, -c(resp, run, sd, mdn:troph_sep))
val_type_per_resp <- val_type[,!names(val_type) %in% c("run", "value", "type")]
val_overview <- val_type_per_resp[!duplicated(val_type_per_resp),]
if (file.exists(modDir)==F){
dir.create(file.path(modDir), recursive = T)
}
saveRDS(val_overview, file = paste0(modDir, "val_mix_overview_mix_", comm, ".rds"))
relv_cols <- c("resp", "Tax_label",
"sd", "mdn", "armean",
"RMSEsd_elevSR_mdn",
"RMSEsd_elevSR_sd",
"RMSEsd_lidarSR_mdn",
"RMSEsd_lidarSR_sd",
"RMSEsd_lidarRES_mdn",
"RMSEsd_lidarRES_sd",
"RMSEsd_sumSR_mdn",
"RMSEsd_sumSR_sd",
"RMSE_elevSR_mdn",
"RMSE_elevSR_sd",
"RMSE_lidarSR_mdn",
"RMSE_lidarSR_sd",
"RMSE_lidarRES_mdn",
"RMSE_lidarRES_sd",
"RMSE_sumSR_mdn",
"RMSE_sumSR_sd")
val_results <- val_overview[, colnames(val_overview) %in% relv_cols]
val_results <- val_results[relv_cols]
val_results <- data.frame(lapply(val_results, function(y) if(is.numeric(y)) signif(y, digits = 2) else y))
row_ord <- c("ants", "bees", "birds", "bugs", "dung beetles", "grasshoppers", "insectivorous bats", "large mammals",
"millipedes", "moths", "other aculeate wasps", "other beetles", "parasitoid wasps", "snails", "spiders", "springtails",
"syrphid flies", "decomposer", "generalist", "herbivore", "predator")
new_order <- sapply(row_ord, function(x,df){which(val_results$Tax_label == x)}, df=val_results)
val_results <- val_results[new_order,]
if (file.exists(paste0(outpath, set_dir, "mix/"))==F){
dir.create(file.path(paste0(outpath, set_dir, "mix/")), recursive = T)
}
write.csv(val_results, file = paste0(outpath, set_dir, "mix/val_results_mix_", comm, ".csv"))
#####
###plotting trophic levels
#####
# Date: 2018-12-10 11:49:55
# to do: colnames(df) <- sicherer gegen umsortieren machen
# bei selvar plot legende eindeutig welche farbe welche zahl ist. (nicht tick im übergang)
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(stringr)
library(tidyr)
library(ggplot2)
library(raster)
library(rasterVis)
library(compositions)
library(RColorBrewer)
library(dplyr)
library(grid)
library(gridExtra)
library(pBrackets)
library(gtable)
library(cowplot)
#####
###set paths
#####
setwd(dirname(rstudioapi::getSourceEditorContext()[[2]]))
# setwd("/mnt/sd19006/data/users/aziegler/src")
sub <- "feb20_allresp/"
# sub <- "apr19/" #paper
inpath <- paste0("../data/", sub)
inpath_general <- "../data/"
outpath <- paste0("../out/", sub)
#####
###where are the models and derived data
#####
set_dir <- "2020-02-12frst_nofrst_allplts_noelev/"
# set_dir <- "2019-03-26frst_nofrst_allplts_noelev/"#paper
mod_dir_lst <- list.dirs(path = paste0(inpath, set_dir), recursive = F, full.names = F)
modDir <- paste0(inpath, set_dir, "mix/")
comm <- ""
grp <- c("specs", "trophs")
trophs <- c("generalist", "herbivore", "decomposer", "predator")
#####
###read files
#####
mix_lst <- readRDS(file = paste0(modDir, "data/", "61_master_lst_varimp_.rds"))
troph_mrg <- readRDS(paste0(inpath, "15_troph_mrg.rds"))
troph_mrg <- troph_mrg[!duplicated(troph_mrg),]
#####
###create list with dataframes including non-forested and forested validation measures
#####
val_all <- do.call(rbind, mix_lst$val)
resp_nm <- lapply(rownames(val_all), function(nm){
splt <- strsplit(nm, split = "\\.")[[1]][1]
})
val_all$resp <- do.call(c,resp_nm)
val_troph <- merge(val_all, troph_mrg, by = "resp")
val_troph$troph_sep[grepl("sum", val_troph$resp)] <- paste0(val_troph$diet[grepl("sum", val_troph$resp)], "_sum")
val_troph$troph_sep[is.na(val_troph$troph_sep)] <- as.character(val_troph$diet[is.na(val_troph$troph_sep)])
# val_troph$troph_sep <- factor(val_troph$troph_sep,
#                               levels = c("predator", "predator_sum", "generalist",
#                                          "generalist_sum", "decomposer",
#                                          "decomposer_sum", "herbivore", "herbivore_sum",
#                                          "plant", "plant_sum", "birds", "bats"))
# val_troph$resp <- factor(val_troph$resp,
# levels = unique(val_troph[with(val_troph, order(troph_sep, resp)),"resp"]))
val_troph$diet <- factor(val_troph$diet,
levels = levels(val_troph$diet))
val_troph_flt <- val_troph[is.finite(val_troph$RMSEsd_lidarSR),]
saveRDS(val_troph, file = paste0(modDir, "val_troph_mix_", comm, ".rds"))
val_type <- gather(val_troph_flt, key = type, value = value, -c(resp, run, sd, mdn:troph_sep))
val_type_per_resp <- val_type[,!names(val_type) %in% c("run", "value", "type")]
val_overview <- val_type_per_resp[!duplicated(val_type_per_resp),]
if (file.exists(modDir)==F){
dir.create(file.path(modDir), recursive = T)
}
saveRDS(val_overview, file = paste0(modDir, "val_mix_overview_mix_", comm, ".rds"))
relv_cols <- c("resp", "Tax_label",
"sd", "mdn", "armean",
"RMSEsd_elevSR_mdn",
"RMSEsd_elevSR_sd",
"RMSEsd_lidarSR_mdn",
"RMSEsd_lidarSR_sd",
"RMSEsd_lidarRES_mdn",
"RMSEsd_lidarRES_sd",
"RMSEsd_sumSR_mdn",
"RMSEsd_sumSR_sd",
"RMSE_elevSR_mdn",
"RMSE_elevSR_sd",
"RMSE_lidarSR_mdn",
"RMSE_lidarSR_sd",
"RMSE_lidarRES_mdn",
"RMSE_lidarRES_sd",
"RMSE_sumSR_mdn",
"RMSE_sumSR_sd")
val_results <- val_overview[, colnames(val_overview) %in% relv_cols]
val_results <- val_results[relv_cols]
val_results <- data.frame(lapply(val_results, function(y) if(is.numeric(y)) signif(y, digits = 2) else y))
row_ord <- c("ants", "bees", "birds", "bugs", "dung beetles", "grasshoppers", "insectivorous bats", "large mammals",
"millipedes", "moths", "other aculeate wasps", "other beetles", "parasitoid wasps", "snails", "spiders", "springtails",
"syrphid flies", "decomposer", "generalist", "herbivore", "predator")
new_order <- sapply(row_ord, function(x,df){which(val_results$Tax_label == x)}, df=val_results)
val_results <- val_results[new_order,]
if (file.exists(paste0(outpath, set_dir, "mix/"))==F){
dir.create(file.path(paste0(outpath, set_dir, "mix/")), recursive = T)
}
write.csv(val_results, file = paste0(outpath, set_dir, "mix/val_results_mix_", comm, ".csv"))
#####
###plotting trophic levels
#####
# Description:
# Author: Alice Ziegler
# Date: 2018-12-10 11:49:55
# t-test: check if RMSE/sd resultes for elevation as best model difer between flying and non-flying animals
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(pastecs)
#####
###set paths
#####
setwd(dirname(rstudioapi::getSourceEditorContext()[[2]]))
# setwd("/mnt/sd19006/data/users/aziegler/src")
# sub <- "oct19/"
#paper:
# sub <- "apr19/"
sub <- "feb20_allresp/"
inpath <- paste0("../data/", sub)
inpath_general <- "../data/"
outpath <- paste0("../out/", sub)
#####
###where are the models and derived data
#####
# set_dir <- "2019-10-10frst_nofrst_allplts_noelev/"
#paper:
# set_dir <- "2019-03-26frst_nofrst_allplts_noelev/"
set_dir <- "2020-02-12frst_nofrst_allplts_noelev/"
mod_dir_lst <- list.dirs(path = paste0(inpath, set_dir), recursive = F, full.names = F)
modDir <- paste0(inpath, set_dir, "mix/")
comm <- ""
grp <- c("specs", "trophs")
trophs <- c("generalist", "herbivore", "decomposer", "predator")
#####
###read files
#####
mix_lst <- readRDS(file = paste0(modDir, "data/", "61_master_lst_varimp_.rds"))
troph_mrg <- readRDS(paste0(inpath, "15_troph_mrg.rds"))
troph_mrg <- troph_mrg[!duplicated(troph_mrg),]
val_overview <- readRDS(file = paste0(modDir, "val_mix_overview_mix_", comm, ".rds"))
val_troph <- readRDS(file = paste0(modDir, "val_troph_mix_", comm, ".rds"))
#size ranking
size <- data.frame(response = c("SRants", "SRbats", "SRbees", "SRbirds", "SRcollembola", "SRdungbeetles",
"SRheteroptera", "SRmammals", "SRmillipedes", "SRmoths", "SRorthoptera", "SRotheraculeata",
"SRothercoleoptera", "SRparasitoids", "SRsnails", "SRspiders", "SRsyrphids"),
size = c(7, 3, 6, 2, 8, 6, 7, 1, 7, 6, 5, 7, 7, 9, 4, 7, 7))
troph_mrg
#####
###Tabellenübersicht der RMSE_sd Median Werte
#####
results_summary <- val_troph[!(val_troph$resp %in% c("sum_decomposer_N3", "sum_generalist_N4",
"sum_herbivore_N3", "sum_predator_N5")),
c("resp", "run", "Tax_label", "fly", "troph_sep",
"RMSEsd_elevSR_mdn", "RMSEsd_lidarSR_mdn", "RMSEsd_sumSR_mdn",
"RMSEsd_lidarRES_mdn",
"RMSEsd_elevSR", "RMSEsd_lidarSR", "RMSEsd_sumSR",
"RMSEsd_lidarRES")]
names(results_summary) <- c("response", "run", "Tax_label", "fly", "troph_sep",
"fig3_elev_median", "fig3_structure_median", "fig3_combination_median",
"fig4_median", "fig3_elev", "fig3_structure", "fig3_combination",
"fig4")
results_mdn_all <- results_summary[,c(1:9)]
results_mdn <- results_mdn_all[!duplicated(results_mdn_all[c("fig3_elev_median")]),]
results_mdn <- merge(results_mdn, size, by = "response")
write.csv(x = results_summary, file = paste0(outpath, "results_summary.csv"))
write.csv(x = results_mdn, file = paste0(outpath, "results_mdn.csv"))
#####
### Spearman correlation test: cor.test with size and median performance
#####
ctest_lst <- lapply(results_mdn[,c(6:9)], function(i){
ctest <- cor.test(results_mdn$size, i)
return(data.frame(estimate_size = ctest$estimate, p_val_size = ctest$p.value))
})
ctest <- do.call(rbind, ctest_lst)
#####
### U-Test: wilcox.test with fly and median performance
#####
wtest_lst <- lapply(results_mdn[,c(6:9)], function(i){
wtest <- wilcox.test(i~results_mdn$fly)
return(data.frame(p_val_fly = wtest$p.value))
})
wtest <- do.call(rbind, wtest_lst)
fly_size_tests <- merge(ctest, wtest, by = 0)
fly_size_tests <- fly_size_tests[c(2,3,1,4),]
fly_size_tests
write.csv(fly_size_tests, file = paste0(outpath, "fly_size_test.csv"))
write.csv(fly_size_tests, file = paste0(outpath, "fly_size_test.csv"))
# Description:
# Author: Alice Ziegler
# Date: 2018-12-10 11:49:55
# t-test: check if RMSE/sd resultes for elevation as best model difer between flying and non-flying animals
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(pastecs)
#####
###set paths
#####
setwd(dirname(rstudioapi::getSourceEditorContext()[[2]]))
# setwd("/mnt/sd19006/data/users/aziegler/src")
# sub <- "oct19/"
#paper:
# sub <- "apr19/"
sub <- "feb20_allresp/"
inpath <- paste0("../data/", sub)
inpath_general <- "../data/"
outpath <- paste0("../out/", sub)
#####
###where are the models and derived data
#####
# set_dir <- "2019-10-10frst_nofrst_allplts_noelev/"
#paper:
# set_dir <- "2019-03-26frst_nofrst_allplts_noelev/"
set_dir <- "2020-02-12frst_nofrst_allplts_noelev/"
mod_dir_lst <- list.dirs(path = paste0(inpath, set_dir), recursive = F, full.names = F)
modDir <- paste0(inpath, set_dir, "mix/")
comm <- ""
grp <- c("specs", "trophs")
trophs <- c("generalist", "herbivore", "decomposer", "predator")
#####
###read files
#####
mix_lst <- readRDS(file = paste0(modDir, "data/", "61_master_lst_varimp_.rds"))
troph_mrg <- readRDS(paste0(inpath, "15_troph_mrg.rds"))
troph_mrg <- troph_mrg[!duplicated(troph_mrg),]
val_overview <- readRDS(file = paste0(modDir, "val_mix_overview_mix_", comm, ".rds"))
val_troph <- readRDS(file = paste0(modDir, "val_troph_mix_", comm, ".rds"))
#size ranking
size <- data.frame(response = c("SRants", "SRbats", "SRbees", "SRbirds", "SRcollembola", "SRdungbeetles",
"SRheteroptera", "SRmammals", "SRmillipedes", "SRmoths", "SRorthoptera", "SRotheraculeata",
"SRothercoleoptera", "SRparasitoids", "SRsnails", "SRspiders", "SRsyrphids"),
size = c(7, 3, 6, 2, 8, 6, 7, 1, 7, 6, 5, 7, 7, 9, 4, 7, 7))
########################################################################################
########################################################################################
########################################################################################
###Do it (Don't change anything past this point except you know what you are doing!) ###
########################################################################################
########################################################################################
########################################################################################
#####
###Tabellenübersicht der RMSE_sd Median Werte
#####
results_summary <- val_troph[!(val_troph$resp %in% c("sum_decomposer_N3", "sum_generalist_N4",
"sum_herbivore_N3", "sum_predator_N5")),
c("resp", "run", "Tax_label", "fly", "troph_sep",
"RMSEsd_elevSR_mdn", "RMSEsd_lidarSR_mdn", "RMSEsd_sumSR_mdn",
"RMSEsd_lidarRES_mdn",
"RMSEsd_elevSR", "RMSEsd_lidarSR", "RMSEsd_sumSR",
"RMSEsd_lidarRES")]
names(results_summary) <- c("response", "run", "Tax_label", "fly", "troph_sep",
"fig3_elev_median", "fig3_structure_median", "fig3_combination_median",
"fig4_median", "fig3_elev", "fig3_structure", "fig3_combination",
"fig4")
results_mdn_all <- results_summary[,c(1:9)]
results_mdn <- results_mdn_all[!duplicated(results_mdn_all[c("fig3_elev_median")]),]
results_mdn <- merge(results_mdn, size, by = "response")
write.csv(x = results_summary, file = paste0(outpath, "results_summary.csv"))
write.csv(x = results_mdn, file = paste0(outpath, "results_mdn.csv"))
#####
### Spearman correlation test: cor.test with size and median performance
#####
ctest_lst <- lapply(results_mdn[,c(6:9)], function(i){
ctest <- cor.test(results_mdn$size, i)
return(data.frame(estimate_size = ctest$estimate, p_val_size = ctest$p.value))
})
ctest <- do.call(rbind, ctest_lst)
#####
### U-Test: wilcox.test with fly and median performance
#####
wtest_lst <- lapply(results_mdn[,c(6:9)], function(i){
wtest <- wilcox.test(i~results_mdn$fly)
return(data.frame(p_val_fly = wtest$p.value))
})
wtest <- do.call(rbind, wtest_lst)
fly_size_tests <- merge(ctest, wtest, by = 0)
fly_size_tests <- fly_size_tests[c(2,3,1,4),]
fly_size_tests
wtest_lst
results_mdn[,c(6:9)]
results_mdn$fly
wtest(results_mdn$fig3_elev_median, results_mdn$fly)
wilcox.test(results_mdn$fig3_elev_median, results_mdn$fly)
fly_size_tests
wilcox.test(results_mdn$fig3_elev_median ~ results_mdn$fly)
results_mdn$fig3_elev_median
results_mdn$fly
wilcox.test(results_mdn$fig3_structure_median ~ results_mdn$fly)
results_mdn$fig3_structure_median
# Author: Alice Ziegler
# Date: 2018-12-01 14:50:05
# to do:
##check flm6 und fer2 for availability
##wirklich nur 5 durchläufe trotz flm6? wird das bei fehlendem flm5 zufällig gelost?? =>mechanismus einbauen
rm(list=ls())
########################################################################################
###Presettings
########################################################################################
#####
###load packages
#####
library(plyr)
library(stringr)
library(caret)
library(gpm)
#####
###set paths
#####
setwd(dirname(rstudioapi::getSourceEditorContext()[[2]]))
# sub <- "apr19/" #paper
sub <- "feb20_allresp/"
inpath <- paste0("../data/", sub)
if (file.exists(inpath)==F){
dir.create(file.path(inpath))
}
inpath_general <- "../data/"
LiDAR_path <- paste0(inpath, "LiDAR/")
# LiDAR_path <- "C:/Users/Alice/Uni/Projekte/Kili/data/dez18/LiDAR/"
if (file.exists(LiDAR_path)==F){
dir.create(file.path(LiDAR_path))
}
outpath <- paste0("../data/", sub)
#####
###read files
#####
ldr_mrg <- readRDS(file = paste0(inpath, "10_ldr_mrg.rds"))
field_dat <- as.data.frame(read.table(file = paste0(inpath_general, "Biodiversity_Data_Marcel.csv"),
sep = ";", header = T, na.strings = "NA", dec = ","))
trophic_tbl <- as.data.frame(read.csv(paste0(inpath_general, "trophic_tbl.csv"), sep = ";"))
gpm_tn <- readRDS(paste0(inpath_general, "ki_hyperspec_biodiv_non_scaled.rds"))
########################################################################################
###Settings
########################################################################################
set <- c("nofrst", "frst", "allplts")
cv_times <- 20
cv_fold <- 5
#######################
###prepare general dataset
#######################
#clean LiDAR data
#get rid of doubled LiDAR plots (foc1)
dups_lst <- ldr_mrg[which(duplicated(ldr_mrg$plotID)),"plotID"]
if(length(dups_lst) > 0){
for (m in dups_lst){
toss <- ldr_mrg[which(ldr_mrg$plotID == m),]
toss$yr <- as.numeric(str_sub(toss$plotUnq, -4, -1))
toss <- toss[which(toss$yr == min(toss$yr)),"plotUnq"]
ldr_mrg <- ldr_mrg[-which(ldr_mrg$plotUnq == toss),]
}
}
#clean field_dat
#remove plots/rows which lack data for more than 50% of taxa (apply sum NAs in taxa columns - if more than half =>
#                                                             delete row)
field_dat <- field_dat[!(apply(field_dat[,c(which(colnames(field_dat) == "SRmammals") :
which(colnames(field_dat) == "SRmagnoliids"))],
1, function(x) {sum(is.na(x)) >
(ncol(field_dat[,c(which(colnames(field_dat) == "SRmammals") :
which(colnames(field_dat) == "SRmagnoliids"))])/2)})),]
#combine LiDAR with field_dat
mrg_tbl <- merge(field_dat, ldr_mrg, by = "plotID")
#create column selID
mrg_tbl$selID <- as.numeric(substr(mrg_tbl$plotID, 4, 4))
#create column elevation squared
mrg_tbl$elevsq <- mrg_tbl$elevation^2
#####
###decide which columns go to meta, resp and potential pred
#####
nm_meta_base <- c("plotID", "cat", "selID")
nm_resp_SR <- c(colnames(mrg_tbl)[c(which(colnames(mrg_tbl) == "SRmammals") :
which(colnames(mrg_tbl) == "SRsnails")
# ,
# which(colnames(mrg_tbl) == "SRrosids") :
#   which(colnames(mrg_tbl) == "SRmagnoliids")
)])
nm_pred_pot <- c(colnames(mrg_tbl)[c(which(colnames(mrg_tbl) %in% "AGB"),
which(colnames(mrg_tbl) %in% "BE_FHD") :
which(colnames(mrg_tbl) %in% "LAI"),
which(colnames(mrg_tbl) %in% "chm_surface_ratio"),
which(colnames(mrg_tbl) %in% "pulse_returns_max") :
which(colnames(mrg_tbl) %in% "pulse_returns_mean"),
which(colnames(mrg_tbl) %in% "pulse_returns_sd"),
which(colnames(mrg_tbl) %in% "vegetation_coverage_01m") :
which(colnames(mrg_tbl) %in% "vegetation_coverage_10m"),
which(colnames(mrg_tbl) %in% "gap_frac"),
which(colnames(mrg_tbl) %in% "mdn_rtrn"),
which(colnames(mrg_tbl) %in% "sd_rtrn_1"),
which(colnames(mrg_tbl) %in% "qntl_rng"),
which(colnames(mrg_tbl) %in% "elevation"),
which(colnames(mrg_tbl) %in% "elevsq"))])
mrg_tbl <- mrg_tbl[which(colnames(mrg_tbl) %in% c(nm_meta_base, nm_resp_SR, nm_pred_pot))]
#######################
###create column "cvindex_run" with index for crossvalidation by index (transect)
#######################
#indices that are not column will be merged into different index for cv
frq <- as.data.frame(table(mrg_tbl$selID))
noruns <- frq[which(frq$Freq < (0.5 * max(frq$Freq))), "Var1"]
runs <- frq[which(frq$Freq >= (0.5 * max(frq$Freq))), "Var1"]
mrg_tbl$cvindex_run <- mrg_tbl$selID
if(length(noruns) > 0){
for (i in noruns){
dist <- mrg_tbl[which(mrg_tbl$selID %in% i),]
df_tmp <- mrg_tbl[which(mrg_tbl$cat == mrg_tbl$cat[which(mrg_tbl$selID == i)] &
mrg_tbl$selID != i),]
run_miss <- runs[-which(runs %in% df_tmp$selID)]
mrg_tbl[which(mrg_tbl$plotID == dist$plotID),"cvindex_run"] <- as.numeric(as.character(run_miss))
}
}
nm_meta <- c(nm_meta_base, "cvindex_run")
#######################
###create dataframe with 20 colums for cv20 cross validation by landuseclass 20 times randomly drawn plot of each landuse
#######################
set.seed(10)
folds <- createMultiFolds(y = mrg_tbl$cat, k = cv_fold, times = cv_times)
folds_outer <- folds[grepl(pattern = "Fold1", names(folds))]
plots_outer <- lapply(folds_outer, function(reps){
mrg_tbl$plotID[-reps]
})
folds_outer
mrg_tbl
plots_outer <- lapply(folds_outer, function(reps){
mrg_tbl$plotID[-reps]
})
plots_outer
unique(merge_tbl$cat)
unique(mrg_tbl$cat)
unique(mrg_tbl$plotID)
table(plots_outer)
a <- unlist(plots_outer)
a
table(a)
b <- table(a)
unique(mrg_tbl$plotID)
colnames(b)
c <- uniwue(mrg_tbl$plotID)
c <- unique(mrg_tbl$plotID)
b %in%c
c %in% b
b %in% c
d <- as.data.frame(b)
d
d$a %in% c
c %in% d$a
b
mrg_tbl$cat
unique(mrg_tbl$cat)
